% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gpDistribution.R
\name{gpDistribution}
\alias{gpDistribution}
\alias{dGP}
\alias{pGP}
\alias{qGP}
\alias{rGP}
\title{The Generalised Pareto distribution}
\usage{
dGP(x, scale = 1, shape = 0, log = FALSE, ...)

pGP(q, scale = 1, shape = 0, lower.tail = TRUE, log.p = FALSE, ...)

qGP(p, scale = 1, shape = 0, lower.tail = TRUE, log.p = FALSE, eps = 1e-06)

rGP(n, scale = 1, shape = 0, eps = 1e-06)
}
\arguments{
\item{x, q}{A numeric vector of quantiles.}

\item{scale}{A numeric vector of \strong{positive} values. Values of the
GP scale parameter \eqn{\sigma}.}

\item{shape}{A numeric vector. Values of the GP shape parameter \eqn{\xi}.}

\item{log, log.p}{A logical scalar. If \code{TRUE} then probabilities, or
probability density values, are given as \eqn{\log(p)}.}

\item{...}{Further arguments to be passed to \code{\link{log1pdx}}, which evaluates
terms of the form \eqn{\log(1+x)/x} in the GP log-density and
log-distribution functions.}

\item{lower.tail}{A logical scalar. If \code{TRUE}, probabilities are
\eqn{P(X \leq x)}, otherwise, \eqn{P(X > x)}.}

\item{p}{A numeric vector of probabilities.}

\item{eps}{A numeric scalar. For values of \eqn{\xi} in \code{shape} that lie in
\verb{(-eps, eps)} an approximation to the GP quantile function is used
instead of a direct calculation. See \strong{Details}.}

\item{n}{A numeric scalar. Number of observations. If
\code{length(n) > 1}, the length is taken to be the number required.}
}
\value{
\code{dGP} gives the density function, \code{pGP} gives the
distribution function, \code{qGP} gives the quantile function,
and \code{rGP} generates random deviates.

The length of the result is determined by \code{n} for \code{rGP},
and is the maximum of the lengths of the numerical arguments for the
other functions.

The numerical arguments other than \code{n} are recycled to the length
of the result.

\code{NA} is returned for any component of the inputs for which \code{x}, \code{q}, \code{p},
\code{scale} or \code{shape} is \code{NA}.

\code{NaN} is returned for any component of \code{scale} that is non-positive and
for any component for which scale\code{and/or}shape\verb{are either}Inf\code{or}-Inf`, with no warning given.
}
\description{
Density, distribution function, quantile function and random generation for
the 2-parameter Generalised Pareto (GP) distribution. Care is taken to avoid
the numerical problems that can occur when the shape parameter is very close
to zero.
}
\details{
The distribution function of a GP distribution with parameters
\code{scale} = \eqn{\sigma (> 0)} and \code{shape} = \eqn{\xi} is
\deqn{F(x) = P(X \leq x) = 1 - \left[ 1+\xi x / \sigma \right]_+^{-1/\xi},}
where \eqn{x_+ = \max(x, 0)}. If \eqn{\xi = 0} the distribution function is
defined as the limit as \eqn{\xi} tends to zero.
The support of the distribution depends on \eqn{\xi}: it is
\eqn{x \geq 0} for \eqn{\xi \geq 0}; and \eqn{0 \leq x \leq -\sigma / \xi}
for \eqn{\xi < 0}.  Note that if \eqn{\xi < -1} the GP density function
becomes infinite as \eqn{x} approaches \eqn{-\sigma/\xi}.

If \code{lower.tail = TRUE} then if \code{p = 0} (\code{p = 1}) then
the lower (upper) limit of the distribution is returned.
The upper limit is \code{Inf} if \code{shape} is non-negative.
Similarly, but reversed, if \code{lower.tail = FALSE}.

In \code{dGP} and \code{pGP}, calculations are performed on a log-scale, which
involves the evaluation of \eqn{\log(1+z)/z}, where
\eqn{z = \xi x / \sigma}. Direct naive calculation using
\code{log(1+z)/z} is unstable for \code{z} close to \code{0}. Use of \code{\link{log1p}}\code{(z)/z}
is much better, but cannot handle the cases where \code{x} is equal to \code{0} or is
extremely close to \code{0}. \code{dGP} and \code{pGP} avoid these issues using a series
approximation, implemented by \code{\link{log1pdx}}.

The GP quantile function is \eqn{-\sigma BC(-\log p, -\xi)}, where
\eqn{BC(x, \lambda) = (x^\lambda - 1)/\lambda} and \eqn{p} is the
probability of the required quantile. If \eqn{\lambda \in} \verb{(-eps,eps)}
then \eqn{BC(x, \lambda)} is approximated by
\eqn{\log x (1+\lambda \log x / 2 + (\lambda \log x)^2 / 6)}.
}
\examples{
# example code

}
